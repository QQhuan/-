/*创建数据库*/
create database qiuhuan_3117004993;

/*创建基本*/
use qiuhuan_3117004993;
DROP TABLE courseNew;
DROP TABLE classroom;
DROP TABLE bookChoose;
DROP TABLE book;
DROP TABLE TeacherCourse;
DROP TABLE teacher;
DROP TABLE SG;
DROP TABLE course;
DROP TABLE student;
DROP TABLE dept;
/*创建dept*/
CREATE TABLE dept
(
	deptId int PRIMARY KEY,
	deptName char(10) NOT NULL,
	deptManager char(10) NOT NULL,
	Mphone char(11)
);

/*创建student*/
CREATE TABLE student
(
	studentId int PRIMARY KEY,
	Sname char(10) NOT NULL,
	sex char(2),
	deptId int NOT NULL, FOREIGN KEY(deptId) REFERENCES dept(deptId),
	birthday date
);

/*创建course*/
CREATE TABLE course
(
	courseId int PRIMARY KEY,
	Cname char(10) NOT NULL,
	Cscore smallint,
	study_time int 
);

/*创建SG，成绩表*/
CREATE TABLE SG
(
	studentId int,
	courseId int, 
	Grade float(1) CHECK(Grade between 0 and 100),
	PRIMARY KEY(studentId,courseId),
	FOREIGN KEY(studentId) REFERENCES student(studentId) ON DELETE CASCADE,
	FOREIGN KEY(courseId) REFERENCES course(courseId)
);

/*创建teacher*/
CREATE TABLE teacher
(
	teacherId int PRIMARY KEY,
	Tname char(10) NOT NULL,
	sex char(2),
	deptId int NOT NULL, FOREIGN KEY(deptId) REFERENCES dept(deptId),
	birth date,
	joindate date
);

/*创建教师选课表*/
CREATE TABLE TeacherCourse
(
	teacherId int, 
	courseId int, 
	PRIMARY KEY(teacherId,courseId),
	FOREIGN KEY(teacherId) REFERENCES teacher(teacherId),
	FOREIGN KEY(courseId) REFERENCES course(courseId),
);

/*创建教材信息*/
Create TABLE book
(
	bookId int PRIMARY KEY,
	Bname char(30) NOT NULL,
	Press char(30),
	price float(2),
	Pdate date
);

/*创建课程-教材选择表*/
CREATE TABLE bookChoose
(
	courseId int,
	bookId int,
	number int,
	PRIMARY KEY(courseId,bookId),
	FOREIGN KEY(courseId) REFERENCES course(courseId),
	FOREIGN KEY(bookId) REFERENCES book(bookId)
);

/*创建教室信息表*/
CREATE TABLE classroom
(
	roomId int PRIMARY KEY,
	roomLocation char(10) NOT NULL,
	contain int
);

/*创建课程安排表*/
CREATE TABLE courseNew
(
	courseId int FOREIGN KEY(courseId) REFERENCES course(courseId),
	teacherId int FOREIGN KEY(teacherId) REFERENCES teacher(teacherId),
	roomId int FOREIGN KEY(roomId) REFERENCES classroom(roomId),
	PRIMARY KEY(courseId,teacherId,roomId)
);

/*插值*/
USE qiuhuan_3117004993;
GO
/*插入dept*/
INSERT 
INTO dept(deptId, deptName, deptManager, Mphone)
VALUES('1', '计算机学院', '马东域', '1351234568');
INSERT 
INTO dept(deptId, deptName, deptManager, Mphone)
VALUES('2', '自动化学院', '阿尔托莉雅', '15521154987');
INSERT 
INTO dept(deptId, deptName, deptManager, Mphone)
VALUES('3', '外国语学院', '零', '15521154948');
INSERT 
INTO dept(deptId, deptName, deptManager, Mphone)
VALUES('4', '信息学院', '黄小明', '15552111546');
INSERT 
INTO dept(deptId, deptName, deptManager, Mphone)
VALUES('5', '环境学院', '蔡先生', '13745898954');

/*插入student*/
INSERT
INTO student(studentId, Sname, sex, deptId, birthday)
VALUES('311', '邱焕', '男', '1', '1999-01-15');
INSERT
INTO student(studentId, Sname, sex, deptId, birthday)
VALUES('312', '许坤', '女', '3', '1999-12-11');
INSERT
INTO student(studentId, Sname, sex, deptId, birthday)
VALUES('313', '韩信', '男', '2', '2000-07-23');
INSERT
INTO student(studentId, Sname, sex, deptId, birthday)
VALUES('314', '李信', '男', '5', '1998-12-28');
INSERT
INTO student(studentId, Sname, sex, deptId, birthday)
VALUES('315', '赵信', '女', '4', '1991-06-19');

/*插入course*/
INSERT 
INTO course(courseId, Cname, Cscore, study_time)
VALUES('1', '操作系统', '6', '24');
INSERT 
INTO course(courseId, Cname, Cscore, study_time)
VALUES('2', '数据库', '2', '24');
INSERT 
INTO course(courseId, Cname, Cscore, study_time)
VALUES('3', '算法设计', '3', '24');
INSERT 
INTO course(courseId, Cname, Cscore, study_time)
VALUES('4', '数据结构', '4', '24');
INSERT 
INTO course(courseId, Cname, Cscore, study_time)
VALUES('5', '英语', '1', '24');

/*插入SG*/
INSERT
INTO SG(studentId, courseId, Grade)
VALUES('311', '1', '100');
INSERT
INTO SG(studentId, courseId, Grade)
VALUES('312', '2', '99');
INSERT
INTO SG(studentId, courseId, Grade)
VALUES('313', '3', '90');
INSERT
INTO SG(studentId, courseId, Grade)
VALUES('314', '4', '95');
INSERT
INTO SG(studentId, courseId, Grade)
VALUES('315', '5', '96');

/*插入teacher*/
INSERT
INTO teacher(teacherId, Tname, sex, deptId, birth, joindate)
VALUES('1', '李宇', '女', '1', '19850806', '2008-01-30');
INSERT
INTO teacher(teacherId, Tname, sex, deptId, birth, joindate)
VALUES('2', '蔡邕', '男', '2', '19880128', '1996-01-30');
INSERT
INTO teacher(teacherId, Tname, sex, deptId, birth, joindate)
VALUES('3', '霍建华', '女', '3', '19900706', '2017-01-30');
INSERT
INTO teacher(teacherId, Tname, sex, deptId, birth, joindate)
VALUES('4', '张云', '男', '4', '19840730', '2019-01-30');
INSERT
INTO teacher(teacherId, Tname, sex, deptId, birth, joindate)
VALUES('5', '刘振勇', '男', '5', '19801207', '2000-01-30');


/*插入TeacherCourse*/
INSERT
INTO TeacherCourse(teacherId, courseId)
VALUES('1', '1');
INSERT
INTO TeacherCourse(teacherId, courseId)
VALUES('2', '2');
INSERT
INTO TeacherCourse(teacherId, courseId)
VALUES('3', '3');
INSERT
INTO TeacherCourse(teacherId, courseId)
VALUES('4', '4');
INSERT
INTO TeacherCourse(teacherId, courseId)
VALUES('5', '5');


/*插入book*/
INSERT
INTO book(bookId, Bname, Press, price, Pdate)
VALUES('1', '《操作系统》', '广工出版', '50.00', '2017-07-07');
INSERT
INTO book(bookId, Bname, Press, price, Pdate)
VALUES('2', '《数据库》', '清华出版', '33.00', '2018-01-06');
INSERT
INTO book(bookId, Bname, Press, price, Pdate)
VALUES('3', '《算法设计》', '机械出版', '80.00', '2015-09-09');
INSERT
INTO book(bookId, Bname, Press, price, Pdate)
VALUES('4', '《数据结构》', '献出版社', '40.00', '2012-10-10');
INSERT
INTO book(bookId, Bname, Press, price, Pdate)
VALUES('5', '《英语2》', '高等出版社', '23.00', '2017-02-02');


/*插入bookChoose*/
INSERT
INTO bookChoose(courseId, bookId, number)
VALUES('1', '1', '1000');
INSERT
INTO bookChoose(courseId, bookId, number)
VALUES('2', '2', '2000');
INSERT
INTO bookChoose(courseId, bookId, number)
VALUES('3', '3', '1300');
INSERT
INTO bookChoose(courseId, bookId, number)
VALUES('4', '4', '1700');
INSERT
INTO bookChoose(courseId, bookId, number)
VALUES('5', '5', '3000');

/*插入classroom*/
INSERT
INTO classroom(roomId, roomLocation, contain)
VALUES('1', '教1', '100');
INSERT
INTO classroom(roomId, roomLocation, contain)
VALUES('2', '教2', '200');
INSERT
INTO classroom(roomId, roomLocation, contain)
VALUES('3', '教3', '150');
INSERT
INTO classroom(roomId, roomLocation, contain)
VALUES('4', '教4', '120');
INSERT
INTO classroom(roomId, roomLocation, contain)
VALUES('5', '教5', '180');

/*插入courseNew*/
INSERT
INTO courseNew(courseId, teacherId, roomId)
VALUES('1', '1', '1');
INSERT
INTO courseNew(courseId, teacherId, roomId)
VALUES('2', '2', '2');
INSERT
INTO courseNew(courseId, teacherId, roomId)
VALUES('3', '3', '3');
INSERT
INTO courseNew(courseId, teacherId, roomId)
VALUES('4', '4', '4');
INSERT
INTO courseNew(courseId, teacherId, roomId)
VALUES('5', '5', '5');


/*查询*/
use qiuhuan_3117004993;

/*查询所有学生的学号+姓名+性别+年龄*/
select studentId, Sname, sex, dateDiff(day, birthday, getdate())/365 AS Sage 
from student;

/*查询某院系的全部学生的学号+姓名+性别+出生日期*/
select student.studentId,Sname, sex, birthday
from student, dept
where student.deptId = dept.deptId and dept.deptName = '计算机学院';

/*查询教材名称中出现SQL字样的教材信息*/
select * 
from book
where Bname like '%SQL%';

/*查询在1997年以后出生的计算机学院学生的学号+姓名+性别+出生日期*/
select student.studentId, Sname, sex, birthday
from student, dept
where student.deptId = dept.deptId and dept.deptName = '计算机学院' and DATEDIFF(day, '1997-01-01', student.birthday) > 0;

/*查询年龄不在22-26之间的学生的学号+院系编号+姓名*/
select studentId, deptId, Sname
from student
where DATEDIFF(day, birthday, getdate())/365 not between 0 and 26;

/*查询全部学生的学号+姓名+性别+所在院系名称+选课信息*/
select student.studentId, Sname, sex, deptName, SG.Grade, course.*
from student, dept, course, SG
where student.deptId = dept.deptId and SG.studentId = student.studentId and SG.courseId = course.courseId;

/*查询学生不及格的情况列出不及格学生的学号+姓名+不及格的课程名称*/
select student.studentId, Sname, Cname
from student, course, SG
where SG.studentId = student.studentId and SG.courseId = course.courseId and SG.Grade < 60;

/*通过查询为教师生成的课程信息，包括：教师院系+教师姓名+任课名称+上课地点+使用的教材名称*/
select dept.deptName, teacher.Tname, course.Cname, classroom.roomLocation, book.Bname
from teacher, book, course, classroom, dept, TeacherCourse, courseNew, bookChoose
where teacher.deptId = dept.deptId and TeacherCourse.teacherId = teacher.teacherId and TeacherCourse.courseId = course.courseId 
and courseNew.courseId = TeacherCourse.courseId and courseNew.teacherId = TeacherCourse.courseId and classroom.roomId = courseNew.roomId
and courseNew.courseId = bookChoose.courseId and bookChoose.bookId = book.bookId

/*查询没有选修课程名中包含“数据库”课程的学生，列出学生的学号和姓名*/
select student.studentId, Sname
from student
where not exists 
	(
		select *
		from SG, course
		where student.studentId = SG.studentId and SG.courseId = course.courseId and course.Cname like '%数据库%'
	)

/*检索年龄为20岁，同时至少选修了一门学分3以上的课程的学生的姓名和院系名称*/
select student.Sname, dept.deptName
from student, dept, SG, course
where DATEDIFF(day, birthday, getdate())/365 = '20' and student.deptId = dept.deptId and SG.studentId = student.studentId and SG.courseId = course.courseId and course.Cscore >= '3'
group by student.Sname, dept.deptName
having count(*) >= 1;

/*可选： 求每个系中平均分最高的学生的学号和姓名、及其平均成绩*/
select b.studentId, Sname, AVG(Grade) as avg
from student b, SG y
where b.studentId = y.studentId
group by b.studentId, Sname, b.deptId
having AVG(Grade) >= ALL 
(
	select AVG(z.Grade)
	from student c, SG z
	where c.studentId = z.studentId and b.deptId = c.deptId
	group by c.studentId
)

/*
select studentId
from  
(
	select c.studentId, c.deptId, AVG(z.Grade) as avg
	from student c, SG z
	where c.studentId = z.studentId
	group by c.studentId, c.deptId
) a
where avg >= ALL
(
	select AVG(y.Grade) as avg
	from student x, SG y
	where x.studentId = y.studentId and a.deptId = x.deptId
	group by x.studentId
) 
*/

/*索引*/
use "qiuhuan_3117004993";

create UNIQUE index stu on SG(studentId, courseId);

create CLUSTERED index num on bookChoose(number);
 
drop index num on bookChoose;


/*视图*/
use "qiuhuan_3117004993";

drop view excellent;
go
create view excellent as
select b.studentId, Sname, AVG(Grade) as avgs
from student b, SG y
where b.studentId = y.studentId
group by b.studentId, Sname, b.deptId
having AVG(Grade) >= ALL 
(
	select AVG(z.Grade)
	from student c, SG z
	where c.studentId = z.studentId and b.deptId = c.deptId
	group by c.studentId
);
drop view S_AVG;
go
create view S_AVG as
select student.studentId, student.Sname, sex, dateDiff(day, birthday, getdate())/365 AS Sage, dept.deptName, course.courseId, course.Cname, SG.Grade
from SG, student, dept, course
where student.studentId = SG.studentId and student.deptId = dept.deptId and student.studentId = SG.studentId and SG.courseId = course.courseId;

select *
from S_AVG;

go
alter view S_AVG as
select student.studentId, student.Sname, sex, dateDiff(day, birthday, getdate())/365 AS Sage, dept.deptName, course.courseId, course.Cname, SG.Grade, YEAR(GETDATE()) as nowaday
from SG, student, dept, course
where student.studentId = SG.studentId and student.deptId = dept.deptId and student.studentId = SG.studentId and SG.courseId = course.courseId;

go
select *
from S_AVG;

drop table greed;

select *
into greed
from (
	select teacher.teacherId, courseNew.courseId
	from teacher, courseNew
	where teacher.teacherId = courseNew.teacherId
)a;

alter table greed add grd varchar(10);

update greed
set grd = '优秀'
where greed.courseId in (
	select SG.courseId
	from SG
	Group by SG.courseId, Grade
	having AVG(Grade) >= 90
);

select grd
from teacher, greed
where teacher.teacherId = greed.teacherId and teacher.Tname = '张云';

/*更新表*/
use "qiuhuan_3117004993";

alter table student
add Sclass int;

alter table student
add Saddress char(10);

alter table book alter column Press char(30) not null;
--if (sql_variant_property(contain,'BaseType') from classroom) = 'int'

alter table classroom alter COLUMN contain char(10);

alter table SG drop constraint ck;
alter table SG add Constraint CK check(Grade between 0 and 150);

/*更新数据*/
use "qiuhuan_3117004993";

update SG
set Grade = Grade + 2
where courseId = (
	select courseId
	from course
	where Cname = '数据库SQL'
);

update book
set Pdate = GETDATE()
where Bname = '《数据库原理》';

delete from book
where bookId not in (
	select bookId
	from bookChoose
);

update bookChoose
set number = (
	select count(studentId)
	from SG
	group by courseId
	having SG.courseId = bookChoose.courseId
)+2;
go
exec sp_helpindex 'SG';


/*存储过程*/
use qiuhuan_3117004993;


if (object_id('list_student_department', 'P') is not null)
    drop proc list_student_department
go
create procedure list_student_department (@deptId int) 
as
begin
	declare curse cursor for
		select studentId, Sname, sex, dept.deptName, birthday
		from student, dept
		where student.deptId = @deptId and student.deptId = dept.deptId
	open curse
	fetch next from curse
	while @@FETCH_STATUS=0
		fetch next from curse
	close curse
	deallocate curse
end
go

--执行存储
exec list_student_department @deptId='1'

go
alter procedure list_student_department(@deptId int)
as
begin
   declare curse2 cursor for
		select studentId, Sname, dept.deptName, birthday
		from student, dept
		where student.deptId = @deptId and student.deptId = dept.deptId
	open curse2
	fetch next from curse2
	while @@FETCH_STATUS=0
		fetch next from curse2
	close curse2
	deallocate curse2
end
go

--执行存储
exec list_student_department @deptId='1'

--删除存储
--drop procedure list_student_department;


/*触发器*/
use qiuhuan_3117004993;

--1
IF EXISTS(
	SELECT *
	FROM sys .triggers
	WHERE name = N'diffName'
)
    DROP TRIGGER diffName
go
--监听修改重名的学生，重名则加上‘*’
create trigger diffName
on student
after insert
as 
begin
	declare @name varchar(50);
	declare @Sid int;
	select @name = Sname from inserted; --获得新添的姓名
	select @Sid = studentId from inserted; --获得新添的学号
	if exists(
		select *
		from student
		where Sname = @name and studentId != @Sid
	)
		update student
		set Sname = Sname+'*'
		where studentId = @Sid;
end

go
delete 
from student
where studentId = '6';
--测试重名
insert into student(Sname, studentId, deptId)
values('邱焕', '6', '1');

--2
IF EXISTS(
	SELECT *
	FROM sys .triggers
	WHERE name = N'newGreed'
)
    DROP TRIGGER newGreed
go
--自动修改老师的评价等级
create trigger newGreed
on SG
after update, insert, delete
as 
begin
	update greed
	set grd = '优秀'
	where greed.courseId in (
		select SG.courseId
		from SG
		Group by SG.courseId, Grade
		having AVG(Grade) >= 90
	);
	update greed
	set grd = '良好'
	where greed.courseId not in (
		select SG.courseId
		from SG
		Group by SG.courseId, Grade
		having AVG(Grade) >= 90
	);
end

go
update SG
set Grade = '90'
where courseId = '3';

--3
IF EXISTS(
	SELECT *
	FROM sys .triggers
	WHERE name = N'deleteStuent'
)
    DROP TRIGGER deleteStuent
go
--删除学生时，级联删除成绩
create trigger deleteStuent
on student
after delete
as 
begin
	declare @id int;
	select @id = studentId from deleted;
	delete 
	from SG
	where SG.studentId = @id;
end

go
delete 
from student
where student.studentId = 6;
